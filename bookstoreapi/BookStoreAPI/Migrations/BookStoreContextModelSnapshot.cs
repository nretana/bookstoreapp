// <auto-generated />
using System;
using BookStore.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.API.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    partial class BookStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BooksBookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BooksBookId", "GenresGenreId");

                    b.HasIndex("GenresGenreId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BooksBookId = new Guid("58006cde-fd5c-4dda-a9b8-293b2dea9116"),
                            GenresGenreId = new Guid("51e3ddad-c7a2-4445-898c-609bc77e67a7")
                        },
                        new
                        {
                            BooksBookId = new Guid("58006cde-fd5c-4dda-a9b8-293b2dea9116"),
                            GenresGenreId = new Guid("acbe4b25-87f6-4496-ada0-5aebfb7add46")
                        },
                        new
                        {
                            BooksBookId = new Guid("58006cde-fd5c-4dda-a9b8-293b2dea9116"),
                            GenresGenreId = new Guid("d53fa392-9639-489f-b173-33d6d910487f")
                        },
                        new
                        {
                            BooksBookId = new Guid("04da94f3-1422-4997-b81e-88c87891abc8"),
                            GenresGenreId = new Guid("51e3ddad-c7a2-4445-898c-609bc77e67a7")
                        },
                        new
                        {
                            BooksBookId = new Guid("bcd3aa72-98e8-453a-8461-82dd63079dc3"),
                            GenresGenreId = new Guid("ceb0472e-7f5e-472c-9d20-ad5e4cbcb6ef")
                        },
                        new
                        {
                            BooksBookId = new Guid("bcd3aa72-98e8-453a-8461-82dd63079dc3"),
                            GenresGenreId = new Guid("7394fd93-e44d-448f-a44c-b23fcfee228b")
                        },
                        new
                        {
                            BooksBookId = new Guid("bcd3aa72-98e8-453a-8461-82dd63079dc3"),
                            GenresGenreId = new Guid("fc2b9d9e-0d6a-4ce8-a6f3-c9c46c956098")
                        },
                        new
                        {
                            BooksBookId = new Guid("bcd3aa72-98e8-453a-8461-82dd63079dc3"),
                            GenresGenreId = new Guid("1afef2ca-1224-485c-9bf1-a5af28bfc265")
                        },
                        new
                        {
                            BooksBookId = new Guid("f912327d-945d-4cfc-b48b-f18cd4be3ad1"),
                            GenresGenreId = new Guid("ceb0472e-7f5e-472c-9d20-ad5e4cbcb6ef")
                        },
                        new
                        {
                            BooksBookId = new Guid("f912327d-945d-4cfc-b48b-f18cd4be3ad1"),
                            GenresGenreId = new Guid("fc2b9d9e-0d6a-4ce8-a6f3-c9c46c956098")
                        },
                        new
                        {
                            BooksBookId = new Guid("f912327d-945d-4cfc-b48b-f18cd4be3ad1"),
                            GenresGenreId = new Guid("7394fd93-e44d-448f-a44c-b23fcfee228b")
                        },
                        new
                        {
                            BooksBookId = new Guid("f912327d-945d-4cfc-b48b-f18cd4be3ad1"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("f912327d-945d-4cfc-b48b-f18cd4be3ad1"),
                            GenresGenreId = new Guid("27e7179f-f788-4035-8a0f-52dab8a6c942")
                        },
                        new
                        {
                            BooksBookId = new Guid("416289b8-98b7-43ee-97e4-f9b73b866cc3"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("416289b8-98b7-43ee-97e4-f9b73b866cc3"),
                            GenresGenreId = new Guid("430b7e5f-6377-45d2-bea6-9bae61d77dba")
                        },
                        new
                        {
                            BooksBookId = new Guid("416289b8-98b7-43ee-97e4-f9b73b866cc3"),
                            GenresGenreId = new Guid("4f3dce22-a7af-4c9f-93b8-61040ecfa1c7")
                        },
                        new
                        {
                            BooksBookId = new Guid("416289b8-98b7-43ee-97e4-f9b73b866cc3"),
                            GenresGenreId = new Guid("51e3ddad-c7a2-4445-898c-609bc77e67a7")
                        },
                        new
                        {
                            BooksBookId = new Guid("ca5f480b-a731-422f-a66b-0f2d90bce100"),
                            GenresGenreId = new Guid("acbe4b25-87f6-4496-ada0-5aebfb7add46")
                        },
                        new
                        {
                            BooksBookId = new Guid("ca5f480b-a731-422f-a66b-0f2d90bce100"),
                            GenresGenreId = new Guid("27e7179f-f788-4035-8a0f-52dab8a6c942")
                        },
                        new
                        {
                            BooksBookId = new Guid("ca5f480b-a731-422f-a66b-0f2d90bce100"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("ee6a9999-8a7c-4c75-96e4-fcbe87fb1f39"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("ee6a9999-8a7c-4c75-96e4-fcbe87fb1f39"),
                            GenresGenreId = new Guid("ceb0472e-7f5e-472c-9d20-ad5e4cbcb6ef")
                        },
                        new
                        {
                            BooksBookId = new Guid("ee6a9999-8a7c-4c75-96e4-fcbe87fb1f39"),
                            GenresGenreId = new Guid("4f3dce22-a7af-4c9f-93b8-61040ecfa1c7")
                        },
                        new
                        {
                            BooksBookId = new Guid("7376672f-8dc6-4d04-8bcb-e93da5d3c013"),
                            GenresGenreId = new Guid("51e3ddad-c7a2-4445-898c-609bc77e67a7")
                        },
                        new
                        {
                            BooksBookId = new Guid("7376672f-8dc6-4d04-8bcb-e93da5d3c013"),
                            GenresGenreId = new Guid("ceb0472e-7f5e-472c-9d20-ad5e4cbcb6ef")
                        },
                        new
                        {
                            BooksBookId = new Guid("7376672f-8dc6-4d04-8bcb-e93da5d3c013"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("7376672f-8dc6-4d04-8bcb-e93da5d3c013"),
                            GenresGenreId = new Guid("fc2b9d9e-0d6a-4ce8-a6f3-c9c46c956098")
                        },
                        new
                        {
                            BooksBookId = new Guid("8d950ad4-1817-4c82-8a28-17ff6098dc9f"),
                            GenresGenreId = new Guid("51e3ddad-c7a2-4445-898c-609bc77e67a7")
                        },
                        new
                        {
                            BooksBookId = new Guid("8d950ad4-1817-4c82-8a28-17ff6098dc9f"),
                            GenresGenreId = new Guid("ceb0472e-7f5e-472c-9d20-ad5e4cbcb6ef")
                        },
                        new
                        {
                            BooksBookId = new Guid("8d950ad4-1817-4c82-8a28-17ff6098dc9f"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("8d950ad4-1817-4c82-8a28-17ff6098dc9f"),
                            GenresGenreId = new Guid("fc2b9d9e-0d6a-4ce8-a6f3-c9c46c956098")
                        },
                        new
                        {
                            BooksBookId = new Guid("b08d1f7a-c874-4743-b742-3b0188f4f96f"),
                            GenresGenreId = new Guid("51e3ddad-c7a2-4445-898c-609bc77e67a7")
                        },
                        new
                        {
                            BooksBookId = new Guid("b08d1f7a-c874-4743-b742-3b0188f4f96f"),
                            GenresGenreId = new Guid("ceb0472e-7f5e-472c-9d20-ad5e4cbcb6ef")
                        },
                        new
                        {
                            BooksBookId = new Guid("b08d1f7a-c874-4743-b742-3b0188f4f96f"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("b08d1f7a-c874-4743-b742-3b0188f4f96f"),
                            GenresGenreId = new Guid("fc2b9d9e-0d6a-4ce8-a6f3-c9c46c956098")
                        },
                        new
                        {
                            BooksBookId = new Guid("5f5b5017-7347-469d-b351-55bac3c348f6"),
                            GenresGenreId = new Guid("51e3ddad-c7a2-4445-898c-609bc77e67a7")
                        },
                        new
                        {
                            BooksBookId = new Guid("5f5b5017-7347-469d-b351-55bac3c348f6"),
                            GenresGenreId = new Guid("ceb0472e-7f5e-472c-9d20-ad5e4cbcb6ef")
                        },
                        new
                        {
                            BooksBookId = new Guid("5f5b5017-7347-469d-b351-55bac3c348f6"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("5f5b5017-7347-469d-b351-55bac3c348f6"),
                            GenresGenreId = new Guid("fc2b9d9e-0d6a-4ce8-a6f3-c9c46c956098")
                        },
                        new
                        {
                            BooksBookId = new Guid("0998a158-8df5-43a0-813e-4ec518f325be"),
                            GenresGenreId = new Guid("27e7179f-f788-4035-8a0f-52dab8a6c942")
                        },
                        new
                        {
                            BooksBookId = new Guid("0998a158-8df5-43a0-813e-4ec518f325be"),
                            GenresGenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077")
                        },
                        new
                        {
                            BooksBookId = new Guid("0998a158-8df5-43a0-813e-4ec518f325be"),
                            GenresGenreId = new Guid("acbe4b25-87f6-4496-ada0-5aebfb7add46")
                        },
                        new
                        {
                            BooksBookId = new Guid("0998a158-8df5-43a0-813e-4ec518f325be"),
                            GenresGenreId = new Guid("7394fd93-e44d-448f-a44c-b23fcfee228b")
                        });
                });

            modelBuilder.Entity("BookStore.API.Entities.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookStore.API.Entities.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("fa9fe4c3-3e45-4690-b792-b0510311e3de"),
                            Biography = "Jaclyn Goldis is a graduate of the University of Michigan, Ann Arbor, and NYU Law. She practiced estate planning law at a large Chicago firm for seven years before leaving her job to travel the world and write novels. Follow her on Instagram and Twitter @jaclyngoldis.",
                            CountryOfBirth = "United States",
                            DateCreated = new DateTimeOffset(new DateTime(2023, 7, 5, 18, 2, 48, 859, DateTimeKind.Unspecified).AddTicks(8851), new TimeSpan(0, -6, 0, 0, 0)),
                            DateOfBirth = new DateTimeOffset(new DateTime(1979, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0)),
                            FirstName = "Jaclyn",
                            LastName = "Goldis",
                            PlaceOfBirth = ""
                        },
                        new
                        {
                            AuthorId = new Guid("e95d66d9-b76b-4487-8b50-a3dd9e076fed"),
                            Biography = "Anne Rice (born Howard Allen Frances O'Brien) was a best-selling American author of gothic, supernatural, historical, erotica, and later religious themed books. Best known for The Vampire Chronicles, her prevailing thematic focus is on love, death, immortality, existentialism, and the human condition. She was married to poet Stan Rice for 41 years until his death in 2002. Her books have sold nearly 100 million copies, making her one of the most widely read authors in modern history.\r\n\r\nAnne Rice passed on December 11, 2021 due to complications from a stroke. She was eighty years old at the time of her death.",
                            CountryOfBirth = "United States",
                            DateCreated = new DateTimeOffset(new DateTime(2023, 7, 5, 18, 2, 48, 859, DateTimeKind.Unspecified).AddTicks(8864), new TimeSpan(0, -6, 0, 0, 0)),
                            DateOfBirth = new DateTimeOffset(new DateTime(1941, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0)),
                            FirstName = "Anne",
                            LastName = "Rice",
                            PlaceOfBirth = "New Orleans, Louisiana"
                        },
                        new
                        {
                            AuthorId = new Guid("0b8199a2-5f74-44f2-aeb8-c892bd63f60a"),
                            Biography = "Cormac McCarthy was an American novelist and playwright. He had written twelve novels in the Southern Gothic, western, and post-apocalyptic genres and had also written plays and screenplays. He received the Pulitzer Prize in 2007 for The Road, and his 2005 novel No Country for Old Men was adapted as a 2007 film of the same name, which won four Academy Awards, including Best Picture. His earlier Blood Meridian (1985) was among Time Magazine's poll of 100 best English-language books published between 1925 and 2005, and he placed joint runner-up for a similar title in a poll taken in 2006 by The New York Times of the best American fiction published in the last 25 years. Literary critic Harold Bloom named him one of the four major American novelists of his time, along with Thomas Pynchon, Don DeLillo, and Philip Roth. He is frequently compared by modern reviewers to William Faulkner. In 2009, Cormac McCarthy won the PEN/Saul Bellow Award, a lifetime achievement award given by the PEN American Center.",
                            CountryOfBirth = "United States",
                            DateCreated = new DateTimeOffset(new DateTime(2023, 7, 5, 18, 2, 48, 859, DateTimeKind.Unspecified).AddTicks(8869), new TimeSpan(0, -6, 0, 0, 0)),
                            DateOfBirth = new DateTimeOffset(new DateTime(1933, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0)),
                            FirstName = "Cormac",
                            LastName = "McCarthy",
                            PlaceOfBirth = "Providence, Rhode Island"
                        },
                        new
                        {
                            AuthorId = new Guid("a109f317-0cb2-4052-a176-a30697bb0ec0"),
                            Biography = "Yann Martel is the author of Life of Pi, the #1 international bestseller and winner of the 2002 Man Booker (among many other prizes). He is also the award-winning author of The Facts Behind the Helsinki Roccamatios (winner of the Journey Prize), Self, Beatrice & Virgil, and 101 Letters to a Prime Minister. Born in Spain in 1963, Martel studied philosophy at Trent University, worked at odd jobs—tree planter, dishwasher, security guard—and traveled widely before turning to writing. He lives in Saskatoon, Canada, with the writer Alice Kuipers and their four children.",
                            CountryOfBirth = "Spain",
                            DateCreated = new DateTimeOffset(new DateTime(2023, 7, 5, 18, 2, 48, 859, DateTimeKind.Unspecified).AddTicks(8873), new TimeSpan(0, -6, 0, 0, 0)),
                            DateOfBirth = new DateTimeOffset(new DateTime(1963, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0)),
                            FirstName = "Yann",
                            LastName = "Martel",
                            PlaceOfBirth = "Salamanca"
                        },
                        new
                        {
                            AuthorId = new Guid("d7f57782-b4f3-4258-aa1b-b9bfde59912a"),
                            Biography = "",
                            CountryOfBirth = "United Kingdom",
                            DateCreated = new DateTimeOffset(new DateTime(2023, 7, 5, 18, 2, 48, 859, DateTimeKind.Unspecified).AddTicks(8876), new TimeSpan(0, -6, 0, 0, 0)),
                            FirstName = "Gillian",
                            LastName = "McAllister",
                            PlaceOfBirth = ""
                        },
                        new
                        {
                            AuthorId = new Guid("e1964bbc-16be-42d9-9f53-0269dab573cb"),
                            Biography = "Emma Rosenblum is chief content officer at Bustle Digital Group, overseeing content and strategy for BDG’s lifestyle, parenting, and culture & innovation portfolios, including Bustle, Elite Daily, Romper, NYLON, The Zoe Report, Romper, Scary Mommy, Fatherly, The Dad, Gawker, Inverse, and Mic. Prior to BDG, Emma served as the executive editor of ELLE. Previously Rosenblum was a senior editor at Bloomberg Businessweek, and before that a senior editor at Glamour. She began her career at New York magazine. She lives in New York City, with her husband and two sons. Bad Summer People is her first novel.",
                            CountryOfBirth = "",
                            DateCreated = new DateTimeOffset(new DateTime(2023, 7, 5, 18, 2, 48, 859, DateTimeKind.Unspecified).AddTicks(8878), new TimeSpan(0, -6, 0, 0, 0)),
                            FirstName = "Emma",
                            LastName = "Rosenblum",
                            PlaceOfBirth = ""
                        },
                        new
                        {
                            AuthorId = new Guid("491177e1-7f31-4a87-a2d4-8d6fc6eea234"),
                            Biography = "New York Times and USA Today bestselling author Tracy Wolff is a lover of vampires, dragons, and all things that go bump in the night. A onetime English professor, she now devotes all her time to writing dark and romantic stories with tortured heroes and kick-butt heroines. She has written all her sixty-plus novels from her home in Austin, Texas, which she shares with her family.",
                            CountryOfBirth = "",
                            DateCreated = new DateTimeOffset(new DateTime(2023, 7, 5, 18, 2, 48, 859, DateTimeKind.Unspecified).AddTicks(8881), new TimeSpan(0, -6, 0, 0, 0)),
                            FirstName = "Tracy",
                            LastName = "Wolff",
                            PlaceOfBirth = ""
                        },
                        new
                        {
                            AuthorId = new Guid("2a71a398-324d-4134-8d9d-d7a625d7bf7a"),
                            Biography = "Charlaine Harris has been a published novelist for over thirty-five years. A native of the Mississippi Delta, she grew up in the middle of a cotton field. Charlaine lives in Texas now, and all of her children and grandchildren are within easy driving distance.\r\n\r\nThough her early output consisted largely of ghost stories, by the time she hit college (Rhodes, in Memphis) Charlaine was writing poetry and plays. After holding down some low-level jobs, her husband Hal gave her the opportunity to stay home and write. The resulting two stand-alones were published by Houghton Mifflin. After a child-producing sabbatical, Charlaine latched on to the trend of series, and soon had her own traditional mystery books about a Georgia librarian, Aurora Teagarden. Her first Teagarden, Real Murders, garnered an Agatha nomination.\r\n\r\nSoon Charlaine was looking for another challenge, and the result was the much darker Lily Bard series. The books, set in Shakespeare, Arkansas, feature a heroine who has survived a terrible attack and is learning to live with its consequences.\r\n\r\nWhen Charlaine began to realize that neither of those series was ever going to set the literary world on fire, she regrouped and decided to write the book she’d always wanted to write. Not a traditional mystery, nor yet pure science fiction or romance, Dead Until Dark broke genre boundaries to appeal to a wide audience of people who simply enjoy a good adventure. Each subsequent book about Sookie Stackhouse, telepathic Louisiana barmaid and friend to vampires, werewolves, and various other odd creatures, was very successful in many languages.\r\n\r\nThe Harper Connelly books were written concurrently with the Sookie novels.\r\n\r\nFollowing the end of Sookie's recorded adventures, Charlaine wrote the \"Midnight, Texas\" books, which have become a television series, also. The Aurora Teagarden books have been adapted by Hallmark Movie & Mystery.\r\n\r\nCharlaine is a member of many professional organizations, an Episcopalian, and currently the lucky houseparent to two rescue dogs. She lives on a cliff overlooking the Brazos River.",
                            CountryOfBirth = "United States",
                            DateCreated = new DateTimeOffset(new DateTime(2023, 7, 5, 18, 2, 48, 859, DateTimeKind.Unspecified).AddTicks(8884), new TimeSpan(0, -6, 0, 0, 0)),
                            FirstName = "Charlaine",
                            LastName = "Harris",
                            PlaceOfBirth = "Tunica, Mississippi"
                        });
                });

            modelBuilder.Entity("BookStore.API.Entities.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FormatId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("04da94f3-1422-4997-b81e-88c87891abc8"),
                            AuthorId = new Guid("e95d66d9-b76b-4487-8b50-a3dd9e076fed"),
                            Description = "From the author of the extraordinary Vampire Chronicles comes a huge, hypnotic novel of witchcraft and the occult through four centuries.\r\n\r\nDemonstrating, once again, her gift for spellbinding storytelling and the creation of legend, Anne Rice makes real for us a great dynasty of witches—a family given to poetry and to incest, to murder and to philosophy; a family that, over the ages, is itself haunted by a powerful, dangerous, and seductive being.\r\n\r\nOn the veranda of a great New Orleans house, now faded, a mute and fragile woman sits rocking... and The Witching Hour begins.\r\n\r\nIt begins in our time with a rescue at sea.  Rowan Mayfair, a beautiful woman, a brilliant practitioner of neurosurgery—aware that she has special powers but unaware that she comes from an ancient line of witches—finds the drowned body of a man off the coast of California and brings him to life. He is Michael Curry, who was born in New Orleans and orphaned in childhood by fire on Christmas Eve, who pulled himself up from poverty, and who now, in his brief interval of death, has acquired a sensory power that mystifies and frightens him.\r\n\r\nAs these two, fiercely drawn to each other, fall in love and—in passionate alliance—set out to solve the mystery of her past and his unwelcome gift, the novel moves backward and forward in time from today's New Orleans and San Francisco to long-ago Amsterdam and a château in the France of Louis XIV.  An intricate tale of evil unfolds—an evil unleashed in seventeenth-century Scotland, where the first \"witch,\" Suzanne of the Mayfair, conjures up the spirit she names Lasher... a creation that spells her own destruction and torments each of her descendants in turn.\r\n\r\nFrom the coffee plantations of Port au Prince, where the great Mayfair fortune is made and the legacy of their dark power is almost destroyed, to Civil War New Orleans, as Julien—the clan's only male to be endowed with occult powers—provides for the dynasty its foothold in America, the dark, luminous story encompasses dramas of seduction and death, episodes of tenderness and healing.  And always—through peril and escape, tension and release—there swirl around us the echoes of eternal war: innocence versus the corruption of the spirit, sanity against madness, life against death. With a dreamlike power, the novel draws us, through circuitous, twilight paths, to the present and Rowan's increasingly inspired and risky moves in the merciless game that binds her to her heritage. And in New Orleans, on Christmas Eve, this strangest of family sagas is brought to its startling climax.",
                            FormatId = new Guid("292959d7-5b31-49ef-ba4f-e1cf307ab6f2"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1327289387i/11901.jpg",
                            Isbn = "9780345373946",
                            Pages = 400,
                            PublishedDate = new DateTime(2004, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Witching Hour"
                        },
                        new
                        {
                            BookId = new Guid("58006cde-fd5c-4dda-a9b8-293b2dea9116"),
                            AuthorId = new Guid("fa9fe4c3-3e45-4690-b792-b0510311e3de"),
                            Description = "A dream girls trip to a luxurious French chateau devolves into a deadly nightmare of secrets and murder in this stylish, twisty thriller for fans of Lucy Foley, Ruth Ware, and Lisa Jewell.\r\n\r\nWelcome to picturesque Provence, where the Lady of the Chateau, Séraphine Demargelasse, has opened its elegant doors to her granddaughter Darcy and three friends. Twenty years earlier, the four girlfriends studied abroad together in France and visited the old woman on the weekends, creating the group’s deep bond. But why this sudden invitation?\r\n\r\nAmid winery tours, market visits, and fancy dinners overlooking olive groves and lavender fields, it becomes clear that each woman has a hidden reason for accepting the invitation. Then, after a wild evening’s celebration, Séraphine is found brutally murdered.\r\n\r\nAs the women search for answers to this shocking crime, fingers begin pointing and a sinister Instagram account pops up, exposing snapshots from the friends’ intimate moments at the chateau, while threatening to reveal more.\r\n\r\nAs they race to uncover who murdered Séraphine and is now stalking them, they learn the chateau houses many secrets…several worth killing for.",
                            FormatId = new Guid("2c537441-6150-45b1-bc7f-57050edf5dda"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1682527923i/62919401.jpg",
                            Isbn = "9781668013014",
                            Pages = 336,
                            PublishedDate = new DateTime(2023, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Chateau"
                        },
                        new
                        {
                            BookId = new Guid("5f5b5017-7347-469d-b351-55bac3c348f6"),
                            AuthorId = new Guid("e95d66d9-b76b-4487-8b50-a3dd9e076fed"),
                            Description = "The Talamasca, documenters of paranormal activity, is on the hunt for the newly born Lasher. Mayfair women are dying from hemorrhages and a strange genetic anomaly has been found in Rowan and Michael. Lasher, born from Rowan, is another species altogether and now in the corporeal body, represents an incalcuable threat to the Mayfairs. Rowan and Lasher travel together to Houston and she becomes pregnant with another creature like him, a Taltos. Lasher seeks to reproduce his race in other women, but they cannot withstand it. Rowan escapes and becomes comatose as her fully-grown Taltos daughter is born. The Mayfairs declare all-out war on Lasher and try to nurse Rowan back to heatlth.\r\n\r\nMichael remains entwined in the Mayfair family and learns how he comes by his strange powers. Michael's ghostly visiting from a long-dead Mayfair reveals the importance of destroying Lasher. In the investigation, Lasher's origins are revealed, the new Taltos Emaleth returns, and the climax of death and life engulfs the family.",
                            FormatId = new Guid("2c537441-6150-45b1-bc7f-57050edf5dda"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1386924775i/31340.jpg",
                            Isbn = "9780099471431",
                            Pages = 400,
                            PublishedDate = new DateTime(2004, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Lasher"
                        },
                        new
                        {
                            BookId = new Guid("b08d1f7a-c874-4743-b742-3b0188f4f96f"),
                            AuthorId = new Guid("e95d66d9-b76b-4487-8b50-a3dd9e076fed"),
                            Description = "Rice's new novel continues the epic occult saga that began with The Witching Hour and Lasher. Taltos takes readers back through the centuries to a civilization part human and part of wholly mysterious origins, at odds with mortality and immortality, justice and guilt.",
                            FormatId = new Guid("a8593958-90cc-4d9e-8785-82b100afdf15"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1328364916i/9804779.jpg",
                            Pages = 533,
                            PublishedDate = new DateTime(2010, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Taltos"
                        },
                        new
                        {
                            BookId = new Guid("8d950ad4-1817-4c82-8a28-17ff6098dc9f"),
                            AuthorId = new Guid("e95d66d9-b76b-4487-8b50-a3dd9e076fed"),
                            Description = "Lestat. The vampire hero of Anne Rice's enthralling new novel is a creature of the darkest and richest imagination. Once an aristocrat in the heady days of pre-revolutionary France, now a rock star in the demonic, shimmering 1980s, he rushes through the centuries in search of others like him, seeking answers to the mystery of his eternal, terrifying existence. His is a mesmerizing story --- passionate, complex, and thrilling.",
                            FormatId = new Guid("2c537441-6150-45b1-bc7f-57050edf5dda"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1347515742i/43814.jpg",
                            Isbn = "9780345476883",
                            Pages = 481,
                            PublishedDate = new DateTime(2004, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Vampire Lestat"
                        },
                        new
                        {
                            BookId = new Guid("7376672f-8dc6-4d04-8bcb-e93da5d3c013"),
                            AuthorId = new Guid("e95d66d9-b76b-4487-8b50-a3dd9e076fed"),
                            Description = "In the latest installment of The Vampire Chronicles, Anne Rice summons up dazzling worlds to bring us the story of Armand - eternally young, with the face of a Botticelli angel. Armand, who first appeared in all his dark glory more than twenty years ago in the now-classic Interview with the Vampire, the first of The Vampire Chronicles, the novel that established its author worldwide as a magnificent storyteller and creator of magical realms.\r\n\r\nNow, we go with Armand across the centuries to the Kiev Rus of his boyhood - a ruined city under Mongol dominion - and to ancient Constantinople, where Tartar raiders sell him into slavery. And in a magnificent palazzo in the Venice of the Renaissance we see him emotionally and intellectually in thrall to the great vampire Marius, who masquerades among humankind as a mysterious, reclusive painter and who will bestow upon Armand the gift of vampiric blood. As the novel races to its climax, moving through scenes of luxury and elegance, of ambush, fire, and devil worship to nineteenth-century Paris and today's New Orleans, we see its eternally vulnerable and romantic hero forced to choose between his twilight immortality and the salvation of his immortal soul.",
                            FormatId = new Guid("2c537441-6150-45b1-bc7f-57050edf5dda"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1388355184i/31332.jpg",
                            Isbn = "9780345434807",
                            Pages = 457,
                            PublishedDate = new DateTime(2000, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Vampire Armand"
                        },
                        new
                        {
                            BookId = new Guid("ee6a9999-8a7c-4c75-96e4-fcbe87fb1f39"),
                            AuthorId = new Guid("a109f317-0cb2-4052-a176-a30697bb0ec0"),
                            Description = "Life of Pi is a fantasy adventure novel by Yann Martel published in 2001. The protagonist, Piscine Molitor \"Pi\" Patel, a Tamil boy from Pondicherry, explores issues of spirituality and practicality from an early age. He survives 227 days after a shipwreck while stranded on a boat in the Pacific Ocean with a Bengal tiger named Richard Parker.",
                            FormatId = new Guid("2c537441-6150-45b1-bc7f-57050edf5dda"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1631251689i/4214.jpg",
                            Isbn = "9780770430078",
                            Pages = 460,
                            PublishedDate = new DateTime(2006, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Life of Pi"
                        },
                        new
                        {
                            BookId = new Guid("ca5f480b-a731-422f-a66b-0f2d90bce100"),
                            AuthorId = new Guid("d7f57782-b4f3-4258-aa1b-b9bfde59912a"),
                            Description = "What will she do ?\r\nThere’s a man out there. His weapon isn’t a gun, or a knife. It’s a secret.\r\n\r\n22 years old. No history of running away. Last seen on CCTV, entering a dead-end alley. And not coming back out again. Missing for one day and counting...\r\n\r\nJULIA; The detective heading up the case. She knows what to expect. A desperate family, a ticking clock, and long hours away from her daughter. But Julia has no idea how close to home this case is going to get. Because her family’s safety depends on one Julia must not find out what happened to Olivia and must frame somebody else for her murder . . . What would you do?",
                            FormatId = new Guid("292959d7-5b31-49ef-ba4f-e1cf307ab6f2"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1683574174i/62292411.jpg",
                            Isbn = "9780063252394",
                            Pages = 460,
                            PublishedDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Just Another Missing Person"
                        },
                        new
                        {
                            BookId = new Guid("0998a158-8df5-43a0-813e-4ec518f325be"),
                            AuthorId = new Guid("e1964bbc-16be-42d9-9f53-0269dab573cb"),
                            Description = "A whip-smart, propulsive debut about infidelity, backstabbing, and murderous intrigue, set against an exclusive summer haven on Fire Island\r\nNone of them would claim to be a particularly good person. But who among them is actually capable of murder?\r\nJen Weinstein and Lauren Parker rule the town of Salcombe, Fire Island every summer. They hold sway on the beach and the tennis court, and are adept at manipulating people to get what they want. Their husbands, Sam and Jason, have summered together on the island since childhood, despite lifelong grudges and numerous secrets. Their one single friend, Rachel Woolf, is looking to meet her match, whether he's the tennis pro-or someone else's husband. But even with plenty to gossip about, this season starts out as quietly as any other.\r\nUntil a body is discovered, face down off the side of the boardwalk.\r\nStylish, subversive and darkly comedic, this is a story of what's lurking under the surface of picture-perfect lives in a place where everyone has something to hide.",
                            FormatId = new Guid("292959d7-5b31-49ef-ba4f-e1cf307ab6f2"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1675084836i/61884844.jpg",
                            Isbn = "9781250887009",
                            Pages = 272,
                            PublishedDate = new DateTime(2023, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Bad Summer People"
                        },
                        new
                        {
                            BookId = new Guid("416289b8-98b7-43ee-97e4-f9b73b866cc3"),
                            AuthorId = new Guid("0b8199a2-5f74-44f2-aeb8-c892bd63f60a"),
                            Description = "A searing, postapocalyptic novel destined to become Cormac McCarthy’s masterpiece.\r\n\r\nA father and his son walk alone through burned America. Nothing moves in the ravaged landscape save the ash on the wind. It is cold enough to crack stones, and when the snow falls it is gray. The sky is dark. Their destination is the coast, although they don’t know what, if anything, awaits them there. They have nothing; just a pistol to defend themselves against the lawless bands that stalk the road, the clothes they are wearing, a cart of scavenged food—and each other.\r\n\r\nThe Road is the profoundly moving story of a journey. It boldly imagines a future in which no hope remains, but in which the father and his son, “each the other’s world entire,” are sustained by love. Awesome in the totality of its vision, it is an unflinching meditation on the worst and the best that we are capable of: ultimate destructiveness, desperate tenacity, and the tenderness that keeps two people alive in the face of total devastation.",
                            FormatId = new Guid("292959d7-5b31-49ef-ba4f-e1cf307ab6f2"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1600241424i/6288.jpg",
                            Isbn = "9780307265432",
                            Pages = 241,
                            PublishedDate = new DateTime(2006, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Road"
                        },
                        new
                        {
                            BookId = new Guid("bcd3aa72-98e8-453a-8461-82dd63079dc3"),
                            AuthorId = new Guid("491177e1-7f31-4a87-a2d4-8d6fc6eea234"),
                            Description = "The sensational conclusion to the massive #1 New York Times bestselling series…\r\n\r\nIt’s been over three months since my friends and I took down Cyrus. Three months where my biggest fear was what paper was due next... But I should have known it was too good to last. Now everything is falling apart.",
                            FormatId = new Guid("292959d7-5b31-49ef-ba4f-e1cf307ab6f2"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1642442027i/60136526.jpg",
                            Isbn = "9781649373168",
                            Pages = 592,
                            PublishedDate = new DateTime(2006, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cherish"
                        },
                        new
                        {
                            BookId = new Guid("f912327d-945d-4cfc-b48b-f18cd4be3ad1"),
                            AuthorId = new Guid("2a71a398-324d-4134-8d9d-d7a625d7bf7a"),
                            Description = "Sookie Stackhouse is just a small-time cocktail waitress in small-town Louisiana. Until the vampire of her dreams walks into her life-and one of her coworkers checks out....\r\nMaybe having a vampire for a boyfriend isn't such a bright idea.",
                            FormatId = new Guid("2c537441-6150-45b1-bc7f-57050edf5dda"),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1468560853i/301082.jpg",
                            Isbn = "9780441008537",
                            Pages = 292,
                            PublishedDate = new DateTime(2001, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dead Until Dark"
                        });
                });

            modelBuilder.Entity("BookStore.API.Entities.Format", b =>
                {
                    b.Property<Guid>("FormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormatId");

                    b.ToTable("Formats");

                    b.HasData(
                        new
                        {
                            FormatId = new Guid("2c537441-6150-45b1-bc7f-57050edf5dda"),
                            Name = "Paperback"
                        },
                        new
                        {
                            FormatId = new Guid("292959d7-5b31-49ef-ba4f-e1cf307ab6f2"),
                            Name = "HardCover"
                        },
                        new
                        {
                            FormatId = new Guid("a8593958-90cc-4d9e-8785-82b100afdf15"),
                            Name = "Kindle Edition"
                        },
                        new
                        {
                            FormatId = new Guid("488248a0-a751-4f92-b6c1-6509b2c97b2c"),
                            Name = "Audiobook"
                        });
                });

            modelBuilder.Entity("BookStore.API.Entities.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = new Guid("d53fa392-9639-489f-b173-33d6d910487f"),
                            Name = "Adult"
                        },
                        new
                        {
                            GenreId = new Guid("cd0b243c-6e41-4679-9927-1ef02b4266a0"),
                            Name = "Art"
                        },
                        new
                        {
                            GenreId = new Guid("7887326a-0311-49ad-981b-d4eeb1d4276c"),
                            Name = "Biography"
                        },
                        new
                        {
                            GenreId = new Guid("7e9aa445-a907-478d-9cbf-02b0529ec7d7"),
                            Name = "Business"
                        },
                        new
                        {
                            GenreId = new Guid("45d82cc5-9791-45af-996d-6218736976e3"),
                            Name = "Children's"
                        },
                        new
                        {
                            GenreId = new Guid("7ff5475d-9987-469e-95d9-d3dd6599be08"),
                            Name = "Christian"
                        },
                        new
                        {
                            GenreId = new Guid("4f3dce22-a7af-4c9f-93b8-61040ecfa1c7"),
                            Name = "Classics"
                        },
                        new
                        {
                            GenreId = new Guid("512c94b1-7359-4543-81bc-1fcdde6c2b44"),
                            Name = "Comics"
                        },
                        new
                        {
                            GenreId = new Guid("9aee9159-a769-4fbd-bd14-482f8c6e1254"),
                            Name = "Cookbooks"
                        },
                        new
                        {
                            GenreId = new Guid("911a64fc-a281-4d9a-b8a4-15efae46c94a"),
                            Name = "Ebooks"
                        },
                        new
                        {
                            GenreId = new Guid("ceb0472e-7f5e-472c-9d20-ad5e4cbcb6ef"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            GenreId = new Guid("740f0608-bbb1-4c32-8dec-f1dc8ae63077"),
                            Name = "Fiction"
                        },
                        new
                        {
                            GenreId = new Guid("3918d2a0-be77-4715-8bb6-b2a2e5f1511e"),
                            Name = "Graphic Novels"
                        },
                        new
                        {
                            GenreId = new Guid("2b8bdb32-41bd-4676-a90a-ec4e25d05ee4"),
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            GenreId = new Guid("b0dc77e8-a8ff-40ef-af0a-bce938563b6a"),
                            Name = "History"
                        },
                        new
                        {
                            GenreId = new Guid("51e3ddad-c7a2-4445-898c-609bc77e67a7"),
                            Name = "Horror"
                        },
                        new
                        {
                            GenreId = new Guid("0b3c4168-076b-4d83-b04b-fee33486bfc0"),
                            Name = "Memoir"
                        },
                        new
                        {
                            GenreId = new Guid("4d4149e9-be14-496d-862e-2b7e9e54853d"),
                            Name = "Music"
                        },
                        new
                        {
                            GenreId = new Guid("27e7179f-f788-4035-8a0f-52dab8a6c942"),
                            Name = "Mystery"
                        },
                        new
                        {
                            GenreId = new Guid("0efea100-4bf0-4d0f-b8c5-606394928d01"),
                            Name = "Nonfiction"
                        },
                        new
                        {
                            GenreId = new Guid("fc2b9d9e-0d6a-4ce8-a6f3-c9c46c956098"),
                            Name = "Paranormal"
                        },
                        new
                        {
                            GenreId = new Guid("56034d8f-51b9-401e-9de5-b85752a72546"),
                            Name = "Poetry"
                        },
                        new
                        {
                            GenreId = new Guid("494c6f99-3679-48b3-971b-88e81e5e6496"),
                            Name = "Psychology"
                        },
                        new
                        {
                            GenreId = new Guid("7394fd93-e44d-448f-a44c-b23fcfee228b"),
                            Name = "Romance"
                        },
                        new
                        {
                            GenreId = new Guid("97738f30-4f54-4f0b-8da4-a16af8665451"),
                            Name = "Science"
                        },
                        new
                        {
                            GenreId = new Guid("430b7e5f-6377-45d2-bea6-9bae61d77dba"),
                            Name = "Science Fiction"
                        },
                        new
                        {
                            GenreId = new Guid("5ee9dcda-0818-4e1a-9356-e9ab7530285e"),
                            Name = "Self Help"
                        },
                        new
                        {
                            GenreId = new Guid("3481994c-e202-460b-bc34-c9f6b5a29ad6"),
                            Name = "Sports"
                        },
                        new
                        {
                            GenreId = new Guid("acbe4b25-87f6-4496-ada0-5aebfb7add46"),
                            Name = "Thriller"
                        },
                        new
                        {
                            GenreId = new Guid("9f750916-994c-45e0-affe-c37a8c760acf"),
                            Name = "Travel"
                        },
                        new
                        {
                            GenreId = new Guid("1afef2ca-1224-485c-9bf1-a5af28bfc265"),
                            Name = "Young Adult"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookStore.API.Entities.Account.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "46f73880-2008-420c-9be9-5fef95cc3fea",
                            ConcurrencyStamp = "c151c00a-b49b-461c-8a08-9fcd389f1ed6",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        },
                        new
                        {
                            Id = "3f49efa5-d266-4305-8f61-bdf56d6caf5d",
                            ConcurrencyStamp = "eded88b7-70d3-4f74-a536-885ff173b7ed",
                            Name = "Administrator",
                            NormalizedName = "ADMNISTRATOR"
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookStore.API.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.API.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.API.Entities.Book", b =>
                {
                    b.HasOne("BookStore.API.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.API.Entities.Format", "Format")
                        .WithMany("Books")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookStore.API.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookStore.API.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.API.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookStore.API.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.API.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.API.Entities.Format", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
